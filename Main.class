import java.awt.Component;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

public class Main extends JFrame {
    private JTable table;
    private JPanel panel;
    private JPanel btnPanel;
    private JButton addBtn;
    private JButton remBtn;
    private DefaultTableModel model;
    private String TABLE_FILE = "library.csv";
    private String[] col;
    private Object[][] data;

    public Main() throws HeadlessException {
        this.ensureTableFileExists();
        this.createGUI();
        Dimension var1 = Toolkit.getDefaultToolkit().getScreenSize();
    }

    private Object[][] getData() {
        BufferedReader var1;
        ArrayList var2;
        try {
            var1 = new BufferedReader(new FileReader(this.TABLE_FILE));
            var2 = new ArrayList();
            String var3 = "";
            System.out.println("-Item list");

            while((var3 = var1.readLine()) != null) {
                if (!var3.isBlank()) {
                    System.out.println("--" + var3);
                    var2.add(var3);
                }
            }

            if (var2.isEmpty()) {
                return this.data;
            }
        } catch (FileNotFoundException var9) {
            throw new RuntimeException(var9);
        } catch (IOException var10) {
            throw new RuntimeException(var10);
        }

        try {
            int var4 = ((String)var2.get(0)).split(",").length;
            Object[][] var5 = new Object[var2.size()][var4];

            for(int var6 = 0; var6 < var2.size(); ++var6) {
                var5[var6] = ((String)var2.get(var6)).split(",");
            }

            var1.close();
            return var5;
        } catch (FileNotFoundException var7) {
            throw new RuntimeException(var7);
        } catch (IOException var8) {
            throw new RuntimeException(var8);
        }
    }

    private void createGUI() {
        this.setTitle("Electronic Parts Library");
        this.setMinimumSize(new Dimension(100, 200));
        this.setResizable(true);
        this.setDefaultCloseOperation(3);
        this.setSize(420, 720);
        this.setResizable(false);
        this.setLocationRelativeTo((Component)null);
        this.panel = new JPanel();
        this.col = new String[]{"Name", "Purpose", "Type"};
        this.data = this.getData();
        this.model = new DefaultTableModel(this.data, this.col);
        this.table = new JTable(this.model);
        JScrollPane var1 = new JScrollPane(this.table);
        this.addBtn = new JButton("New Part");
        this.addBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent var1) {
                JTextField var2 = new JTextField();
                JTextField var3 = new JTextField();
                JComboBox var4 = new JComboBox();
                DefaultComboBoxModel var5 = new DefaultComboBoxModel(new String[]{"Module", "Sensor", "Board", "Input Device", "Output Device", "Passive Component", "Other"});
                var4.setModel(var5);
                Object[] var6 = new Object[]{"Name", var2, "Purpose", var3, "Type", var4};
                int var7 = JOptionPane.showConfirmDialog((Component)null, var6, "New Part", 2);
                if (var7 == 0) {
                    String var8 = var2.getText();
                    String var9 = var3.getText();
                    String var10 = (String)var4.getSelectedItem();
                    String var11 = var8 + "," + var9 + "," + var10;
                    Main.this.newRow(var11);
                    Object[] var12 = new Object[]{var8, var9, var10};
                    Main.this.model.addRow(var12);
                }

            }
        });
        this.remBtn = new JButton("Remove Part");
        this.remBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent var1) {
                int var2 = Main.this.table.getSelectedRow();
                int var3 = Main.this.table.getSelectedColumn();
                if (var2 != -1) {
                    int var4 = JOptionPane.showConfirmDialog((Component)null, "Are you sure you want to delete " + String.valueOf(Main.this.model.getValueAt(var2, var3)) + "?", "Confirm removal", 0);
                    if (var4 == 0) {
                        Main.this.model.removeRow(var2);
                        Main.this.saveTableFile();
                    }
                }

            }
        });
        this.btnPanel = new JPanel();
        this.btnPanel.add(this.addBtn);
        this.btnPanel.add(this.remBtn);
        this.add(this.btnPanel, "South");
        this.panel.add(var1);
        this.add(this.panel, "North");
        this.pack();
        this.setVisible(true);
    }

    private void saveTableFile() {
        try {
            BufferedWriter var1 = new BufferedWriter(new FileWriter(this.TABLE_FILE));

            for(int var2 = 0; var2 < this.model.getRowCount(); ++var2) {
                for(int var3 = 0; var3 < this.model.getColumnCount(); ++var3) {
                    var1.write(this.model.getValueAt(var2, var3).toString());
                    if (var3 < this.model.getColumnCount() - 1) {
                        var1.write(",");
                    }
                }

                var1.newLine();
            }

            var1.close();
        } catch (IOException var4) {
            throw new RuntimeException(var4);
        }
    }

    private void newRow(String var1) {
        try {
            BufferedWriter var2 = new BufferedWriter(new FileWriter(this.TABLE_FILE, true));
            var2.newLine();
            var2.write(var1);
            var2.close();
        } catch (IOException var3) {
            throw new RuntimeException(var3);
        }
    }

    private void ensureTableFileExists() {
        File var1 = new File(this.TABLE_FILE);
        if (!var1.exists()) {
            try {
                var1.createNewFile();
                System.out.println("Created new empty library file: " + this.TABLE_FILE);
            } catch (IOException var3) {
                System.err.println("Failed to create library file: " + var3.getMessage());
            }
        }

    }

    public static void main(String[] var0) {
        new Main();
    }
}
